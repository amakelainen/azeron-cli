use std::collections::HashMap;

// haha funny statics go brrr
// most of these are taken directly from the source of the official app

lazy_static::lazy_static! {
    pub static ref BUTTON_HAT_VALUES: [u16; 8] = [0, 45, 90, 135, 180, 225, 270, 315];
    pub static ref BUTTON_HAT_NAMES: HashMap<u16, &'static str> = {
        vec![(0, "UP"), (45, "UP RIGHT"), (90, "RIGHT"), (135, "RIGHT DOWN"), (180, "DOWN"), (225, "DOWN LEFT"), (270, "LEFT"), (315, "LEFT UP")].into_iter().collect()
    };
    pub static ref DEVICE_KEYS: HashMap<u32, &'static str> = {
        vec![(57345, "MODIFIERKEY_LEFT_CTRL"),
        (57346, "MODIFIERKEY_LEFT_SHIFT"),
        (57348, "MODIFIERKEY_LEFT_ALT"),
        (57352, "MODIFIERKEY_LEFT_GUI"),
        (57360, "MODIFIERKEY_RIGHT_CTRL"),
        (57376, "MODIFIERKEY_RIGHT_SHIFT"),
        (57408, "MODIFIERKEY_RIGHT_ALT"),
        (57472, "MODIFIERKEY_RIGHT_GUI"),
        (57985, "KEY_SYSTEM_POWER_DOWN"),
        (57986, "KEY_SYSTEM_SLEEP"),
        (57987, "KEY_SYSTEM_WAKE_UP"),
        (58544, "KEY_MEDIA_RANDOM_PLAY"),
        (58545, "KEY_MEDIA_PAUSE"),
        (58546, "KEY_MEDIA_RECORD"),
        (58547, "KEY_MEDIA_FAST_FORWARD"),
        (58548, "KEY_MEDIA_REWIND"),
        (58549, "KEY_MEDIA_NEXT_TRACK"),
        (58550, "KEY_MEDIA_PREV_TRACK"),
        (58551, "KEY_MEDIA_STOP"),
        (58552, "KEY_MEDIA_EJECT"),
        (58573, "KEY_MEDIA_PLAY_PAUSE"),
        (58574, "KEY_MEDIA_PLAY_SKIP"),
        (58594, "KEY_MEDIA_MUTE"),
        (58601, "KEY_MEDIA_VOLUME_INC"),
        (58602, "KEY_MEDIA_VOLUME_DEC"),
        (61444, "KEY_A"),
        (61445, "KEY_B"),
        (61446, "KEY_C"),
        (61447, "KEY_D"),
        (61448, "KEY_E"),
        (61449, "KEY_F"),
        (61450, "KEY_G"),
        (61451, "KEY_H"),
        (61452, "KEY_I"),
        (61453, "KEY_J"),
        (61454, "KEY_K"),
        (61455, "KEY_L"),
        (61456, "KEY_M"),
        (61457, "KEY_N"),
        (61458, "KEY_O"),
        (61459, "KEY_P"),
        (61460, "KEY_Q"),
        (61461, "KEY_R"),
        (61462, "KEY_S"),
        (61463, "KEY_T"),
        (61464, "KEY_U"),
        (61465, "KEY_V"),
        (61466, "KEY_W"),
        (61467, "KEY_X"),
        (61468, "KEY_Y"),
        (61469, "KEY_Z"),
        (61470, "KEY_1"),
        (61471, "KEY_2"),
        (61472, "KEY_3"),
        (61473, "KEY_4"),
        (61474, "KEY_5"),
        (61475, "KEY_6"),
        (61476, "KEY_7"),
        (61477, "KEY_8"),
        (61478, "KEY_9"),
        (61479, "KEY_0"),
        (61480, "KEY_ENTER"),
        (61481, "KEY_ESC"),
        (61482, "KEY_BACKSPACE"),
        (61483, "KEY_TAB"),
        (61484, "KEY_SPACE"),
        (61485, "KEY_MINUS"),
        (61486, "KEY_EQUAL"),
        (61487, "KEY_LEFT_BRACE"),
        (61488, "KEY_RIGHT_BRACE"),
        (61489, "KEY_BACKSLASH"),
        (61490, "KEY_NON_US_NUM"),
        (61491, "KEY_SEMICOLON"),
        (61492, "KEY_QUOTE"),
        (61493, "KEY_TILDE"),
        (61494, "KEY_COMMA"),
        (61495, "KEY_PERIOD"),
        (61496, "KEY_SLASH"),
        (61497, "KEY_CAPS_LOCK"),
        (61498, "KEY_F1"),
        (61499, "KEY_F2"),
        (61500, "KEY_F3"),
        (61501, "KEY_F4"),
        (61502, "KEY_F5"),
        (61503, "KEY_F6"),
        (61504, "KEY_F7"),
        (61505, "KEY_F8"),
        (61506, "KEY_F9"),
        (61507, "KEY_F10"),
        (61508, "KEY_F11"),
        (61509, "KEY_F12"),
        (61510, "KEY_PRINTSCREEN"),
        (61511, "KEY_SCROLL_LOCK"),
        (61512, "KEY_PAUSE"),
        (61513, "KEY_INSERT"),
        (61514, "KEY_HOME"),
        (61515, "KEY_PAGE_UP"),
        (61516, "KEY_DELETE"),
        (61517, "KEY_END"),
        (61518, "KEY_PAGE_DOWN"),
        (61519, "KEY_RIGHT"),
        (61520, "KEY_LEFT"),
        (61521, "KEY_DOWN"),
        (61522, "KEY_UP"),
        (61523, "KEY_NUM_LOCK"),
        (61524, "KEYPAD_SLASH"),
        (61525, "KEYPAD_ASTERIX"),
        (61526, "KEYPAD_MINUS"),
        (61527, "KEYPAD_PLUS"),
        (61528, "KEYPAD_ENTER"),
        (61529, "KEYPAD_1"),
        (61530, "KEYPAD_2"),
        (61531, "KEYPAD_3"),
        (61532, "KEYPAD_4"),
        (61533, "KEYPAD_5"),
        (61534, "KEYPAD_6"),
        (61535, "KEYPAD_7"),
        (61536, "KEYPAD_8"),
        (61537, "KEYPAD_9"),
        (61538, "KEYPAD_0"),
        (61539, "KEYPAD_PERIOD"),
        (61540, "KEY_NON_US_BS"),
        (61541, "KEY_MENU"),
        (61544, "KEY_F13"),
        (61545, "KEY_F14"),
        (61546, "KEY_F15"),
        (61547, "KEY_F16"),
        (61548, "KEY_F17"),
        (61549, "KEY_F18"),
        (61550, "KEY_F19"),
        (61551, "KEY_F20"),
        (61552, "KEY_F21"),
        (61553, "KEY_F22"),
        (61554, "KEY_F23"),
        (61555, "KEY_F24"),].into_iter().collect()
    };
    pub static ref REVERSED_DEVICE_KEYS: HashMap<&'static str, u32> = DEVICE_KEYS.iter().map(|(k, v)| (*v, *k)).collect();
    pub static ref JAVASCRIPT_KEY_CODES: HashMap<u32, &'static str> = {
        vec![
            (1, "M1"),
            (2, "M2"),
            (4, "M3"),
            (5, "M4"),
            (6, "M5"),
            (8, "Backspace"),
            (9, "Tab"),
            (12, "Clear"),
            (13, "Enter"),
            (16, "Shift"),
            (17, "Ctrl"),
            (18, "Alt"),
            (19, "Pause/Break"),
            (20, "Caps Lock"),
            (21, "IME Hangul"),
            (23, "IME Junja"),
            (24, "IME Final"),
            (25, "IME Kanji"),
            (27, "Esc"),
            (28, "IME Convert"),
            (29, "IME Nonconvert"),
            (30, "IME Accept"),
            (31, "IME Mode Change Request"),
            (32, "Space"),
            (33, "Page Up"),
            (34, "Page Down"),
            (35, "End"),
            (36, "Home"),
            (37, "Left"),
            (38, "Up"),
            (39, "Right"),
            (40, "Down"),
            (41, "Select"),
            (42, "Print"),
            (43, "Execute"),
            (44, "Prnt Scr"),
            (45, "Insert"),
            (46, "Delete"),
            (47, "Help"),
            (48, "0"),
            (49, "1"),
            (50, "2"),
            (51, "3"),
            (52, "4"),
            (53, "5"),
            (54, "6"),
            (55, "7"),
            (56, "8"),
            (57, "9"),
            (65, "A"),
            (66, "B"),
            (67, "C"),
            (68, "D"),
            (69, "E"),
            (70, "F"),
            (71, "G"),
            (72, "H"),
            (73, "I"),
            (74, "J"),
            (75, "K"),
            (76, "L"),
            (77, "M"),
            (78, "N"),
            (79, "O"),
            (80, "P"),
            (81, "Q"),
            (82, "R"),
            (83, "S"),
            (84, "T"),
            (85, "U"),
            (86, "V"),
            (87, "W"),
            (88, "X"),
            (89, "Y"),
            (90, "Z"),
            (91, "Win"),
            (92, "Win"),
            (93, "Menu"),
            (95, "Sleep"),
            (96, "Numpad 0"),
            (97, "Numpad 1"),
            (98, "Numpad 2"),
            (99, "Numpad 3"),
            (100, "Numpad 4"),
            (101, "Numpad 5"),
            (102, "Numpad 6"),
            (103, "Numpad 7"),
            (104, "Numpad 8"),
            (105, "Numpad 9"),
            (106, "Numpad *"),
            (107, "Numpad +"),
            (109, "Numpad -"),
            (110, "Numpad ."),
            (111, "Numpad /"),
            (112, "F1"),
            (113, "F2"),
            (114, "F3"),
            (115, "F4"),
            (116, "F5"),
            (117, "F6"),
            (118, "F7"),
            (119, "F8"),
            (120, "F9"),
            (121, "F10"),
            (122, "F11"),
            (123, "F12"),
            (124, "F13"),
            (125, "F14"),
            (126, "F15"),
            (127, "F16"),
            (144, "Num Lock"),
            (145, "Scroll Lock"),
            (160, "Shift"),
            (161, "Shift"),
            (162, "Ctrl"),
            (163, "Ctrl"),
            (164, "L Menu"),
            (165, "R Menu"),
            (166, "Back"),
            (167, "Fowrard"),
            (168, "Refresh"),
            (169, "Stop"),
            (170, "Search"),
            (171, "Fav"),
            (172, "Browser"),
            (173, "Mute"),
            (174, "Volume Down"),
            (175, "Volume Up"),
            (176, "Next Track"),
            (177, "Prev Track"),
            (178, "Stop"),
            (179, "Play/Pause"),
            (180, "Mail"),
            (181, "Select"),
            (182, "My Computer"),
            (183, "My Calculator"),
            (186, ";"),
            (187, "="),
            (188, "),"),
            (189, "-"),
            (190, "."),
            (191, "/"),
            (192, "`"),
            (219, "["),
            (220, "\\"),
            (221, "]"),
            (222, "'"),
            (250, "Play"),
            (251, "Zoom"),
        ].into_iter().collect()
    };
    pub static ref REVERSED_JAVASCRIPT_KEY_CODES: HashMap<&'static str, u32> = JAVASCRIPT_KEY_CODES.iter().map(|(k, v)| (*v, *k)).collect();
    pub static ref JAVASCRIPT_TO_DEVICE_KEY: HashMap<u32, &'static str> = {
        vec![
            (0, "0"),
            (17, "57345"),
            (162, "57345"),
            (163, "57345"),
            (16, "57346"),
            (160, "57346"),
            (161, "57346"),
            (18, "57348"),
            (91, "57352"),
            (92, "57352"),
            (95, "57986"),
            (178, "58551"),
            (176, "58549"),
            (177, "58550"),
            (179, "58573"),
            (173, "58594"),
            (175, "58601"),
            (174, "58602"),
            (65, "61444"),
            (66, "61445"),
            (67, "61446"),
            (68, "61447"),
            (69, "61448"),
            (70, "61449"),
            (71, "61450"),
            (72, "61451"),
            (73, "61452"),
            (74, "61453"),
            (75, "61454"),
            (76, "61455"),
            (77, "61456"),
            (78, "61457"),
            (79, "61458"),
            (80, "61459"),
            (81, "61460"),
            (82, "61461"),
            (83, "61462"),
            (84, "61463"),
            (85, "61464"),
            (86, "61465"),
            (87, "61466"),
            (88, "61467"),
            (89, "61468"),
            (90, "61469"),
            (49, "61470"),
            (50, "61471"),
            (51, "61472"),
            (52, "61473"),
            (53, "61474"),
            (54, "61475"),
            (55, "61476"),
            (56, "61477"),
            (57, "61478"),
            (48, "61479"),
            (13, "61480"),
            (27, "61481"),
            (8, "61482"),
            (9, "61483"),
            (32, "61484"),
            (189, "61485"),
            (187, "61486"),
            (219, "61487"),
            (221, "61488"),
            (220, "61489"),
            (186, "61491"),
            (222, "61492"),
            (192, "61493"),
            (188, "61494"),
            (190, "61495"),
            (191, "61496"),
            (20, "61497"),
            (112, "61498"),
            (113, "61499"),
            (114, "61500"),
            (115, "61501"),
            (116, "61502"),
            (117, "61503"),
            (118, "61504"),
            (119, "61505"),
            (120, "61506"),
            (121, "61507"),
            (122, "61508"),
            (123, "61509"),
            (44, "61510"),
            (145, "61511"),
            (19, "61512"),
            (45, "61513"),
            (36, "61514"),
            (33, "61515"),
            (46, "61516"),
            (35, "61517"),
            (34, "61518"),
            (39, "61519"),
            (37, "61520"),
            (40, "61521"),
            (38, "61522"),
            (144, "61523"),
            (111, "61524"),
            (106, "61525"),
            (109, "61526"),
            (107, "61527"),
            (97, "61529"),
            (98, "61530"),
            (99, "61531"),
            (100, "61532"),
            (101, "61533"),
            (102, "61534"),
            (103, "61535"),
            (104, "61536"),
            (105, "61537"),
            (96, "61538"),
            (110, "61539"),
            (93, "61541"),
        ].into_iter().collect()
    };
    pub static ref DEVICE_KEY_TO_JAVASCRIPT: HashMap<&'static str, u32> = JAVASCRIPT_TO_DEVICE_KEY.iter().map(|(k, v)| (*v, *k)).collect();
    pub static ref XINPUT_TO_READABLE: HashMap<u32, &'static str> = {
        vec![
            (32768, "Y"),
            (16384, "X"),
            (8192, "B"),
            (4096, "A"),
            (1024, "HOME"),
            (512, "RB"),
            (256, "LB"),
            (128, "PUSH R STICK"),
            (64, "PUSH L STICK"),
            (32, "BACK"),
            (16, "START"),
            (8, "DPAD RIGHT"),
            (4, "DPAD LEFT"),
            (2, "DPAD DOWN"),
            (1, "DPAD UP"),
        ].into_iter().collect()
    };
    pub static ref READABLE_TO_XINPUT: HashMap<&'static str, u32> = XINPUT_TO_READABLE.iter().map(|(k, v)| (*v, *k)).collect();
    pub static ref VIRTUAL_KEYBOARD_KEYS: HashMap<u32, &'static str> = {
        vec![
            (33, "VK_PAGE_UP"),
            (34, "VK_PAGE_DOWN"),
            (91, "VK_SUPER"),
            (92, "VK_SUPER"),
            (17, "VK_CONTROL "),
            (162, "VK_CONTROL "),
            (163, "VK_CONTROL "),
            (161, "VK_SHIFT"),
            (44, "VK_SHIFT"),
            (96, "VK_NUMPAD0"),
            (97, "VK_NUMPAD1"),
            (98, "VK_NUMPAD2"),
            (99, "VK_NUMPAD3"),
            (100, "VK_NUMPAD4"),
            (101, "VK_NUMPAD5"),
            (102, "VK_NUMPAD6"),
            (103, "VK_NUMPAD7"),
            (104, "VK_NUMPAD8"),
            (105, "VK_NUMPAD9"),
        ].into_iter().collect()
    };
    pub static ref JAVASCRIPT_KEY_CODE_TO_ROBOT: HashMap<u32, String> = {
        let mut map = HashMap::new();
        for (k, v) in &*JAVASCRIPT_KEY_CODES {
            map.insert(*k, v.to_uppercase());
        }
        for (k, v) in &*VIRTUAL_KEYBOARD_KEYS {
            map.insert(*k, v.to_uppercase());
        }

        map
    };
    pub static ref REVERSED_JAVASCRIPT_KEY_CODE_TO_ROBOT: HashMap<&'static String, u32> = JAVASCRIPT_KEY_CODE_TO_ROBOT.iter().map(|(k, v)| (v, *k)).collect();

    pub static ref BUTTON_IDS_TO_PINS: HashMap<u8, [u8; 2]> = {
        vec![
            (1, [26, 255]),
            (2, [25, 255]),
            (3, [24, 255]),
            (4, [23, 255]),
            (5, [22, 255]),
            (6, [21, 255]),
            (7, [20, 255]),
            (8, [19, 255]),
            (9, [27, 255]),
            (10, [0, 255]),
            (11, [1, 255]),
            (12, [2, 255]),
            (13, [3, 255]),
            (14, [4, 255]),
            (15, [5, 255]),
            (16, [8, 255]),
            (17, [9, 255]),
            (18, [10, 255]),
            (19, [11, 255]),
            (20, [12, 255]),
            (21, [14, 13]),
            (22, [38, 255]),
            (23, [18, 255]),
            (24, [39, 40]),
            (25, [39, 40]),
            (26, [39, 40]),
            (27, [39, 40]),
            (28, [42, 255]),
            (29, [43, 255]),
            (30, [44, 255]),
            (31, [45, 255]),
            (32, [39, 40]),
            (33, [39, 40]),
            (34, [39, 40]),
            (35, [39, 40]),
            (36, [7, 255]),
            (37, [17, 255]),
            (38, [41, 255])
        ].into_iter().collect()
    };
    pub static ref USB_TO_DEVICE_KEY: HashMap<u32, u32> = {
        vec![
            (0xe0, 57345),  // MODIFIERKEY_LEFT_CTRL
            (0xe1, 57346),  // MODIFIERKEY_LEFT_SHIFT
            (0xe2, 57348),  // MODIFIERKEY_LEFT_ALT
            (0xe3, 57352),  // MODIFIERKEY_LEFT_GUI
            (0xe4, 57360),  // MODIFIERKEY_RIGHT_CTRL
            (0xe5, 57376),  // MODIFIERKEY_RIGHT_SHIFT
            (0xe6, 57408),  // MODIFIERKEY_RIGHT_ALT
            (0xe7, 57472),  // MODIFIERKEY_RIGHT_GUI
        ].into_iter().collect()
    };
}
